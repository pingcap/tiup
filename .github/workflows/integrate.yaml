---

name: integrate

on:
  pull_request:
    branches:
      - master
      - release-*


jobs:

  cluster:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        cases:
          - "test_cmd"
          - "test_upgrade"
          # - "test_dm_cmd"
    env:
      working-directory: ${{ github.workspace   }}/go/src/github.com/${{ github.repository   }}
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha  }}
          path: go/src/github.com/${{ github.repository  }}
      - name: Build build_integration_test
        working-directory: ${{env.working-directory}}
        run: |
          export GOPATH=${GITHUB_WORKSPACE}/go
          export PATH=$PATH:$GOPATH/bin
          make build_integration_test

      - name: Build the docker-compose stack
        working-directory: ${{env.working-directory}}
        # with --dev the first run will fail for unknow reason, just retry it and will success now..
        run: TIUP_CLUSTER_ROOT=${{env.working-directory}} ./docker/up.sh --daemon --dev || TIUP_CLUSTER_ROOT=${{env.working-directory}} ./docker/up.sh --daemon --dev

      - name: Check running containers
        run: |
          docker ps
          df -h
          free -h

      - name: Run test suite
        id: test
        working-directory: ${{env.working-directory}}
        run: |
          # should not use -it
          # ref: https://stackoverflow.com/questions/43099116/error-the-input-device-is-not-a-tty
          docker exec  tiup-cluster-control bash /tiup-cluster/tests/tiup-cluster/run.sh ${{matrix.cases}}

      - name: Collect component log
        working-directory: ${{env.working-directory}}
        # if: steps.test.outputs.exit_code != 0
        if: always()
        run: |
          docker exec  tiup-cluster-control bash /tiup-cluster/tests/tiup-cluster/script/pull_log.sh /tiup-cluster/logs
          ls ${{env.working-directory}}
          tar czvf ${{env.working-directory}}/logs.tar.gz ${{env.working-directory}}/logs/

      - name: Upload component log
        # if: steps.test.outputs.exit_code != 0
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: component_logs
          path: ${{env.working-directory}}/logs.tar.gz

      - name: Output cluster debug log
        working-directory: ${{env.working-directory}}
        if: always()
        run: |
          pwd
          docker ps
          df -h
          free -h
          "cat ./tests/*.log" || true

      - name: Upload cover files
        uses: actions/upload-artifact@v1
        with:
          name: ${{matrix.cases}}-cover
          path: ${{env.working-directory}}/tests/tiup-cluster/cover

  playground:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: true
      matrix:
        cases:
          - "test_playground"
    env:
      working-directory: ${{ github.workspace   }}/go/src/github.com/${{ github.repository   }}
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha  }}
          path: go/src/github.com/${{ github.repository  }}
      - name: Build build_tiup_playground_test
        working-directory: ${{env.working-directory}}
        run: |
          export GOPATH=${GITHUB_WORKSPACE}/go
          export PATH=$PATH:$GOPATH/bin
          make tiup build_tiup_playground_test

      - name: Run test suite
        id: test
        working-directory: ${{env.working-directory}}
        run: |
          export PATH=$PATH:${{env.working-directory}}/bin/
          bash ${{env.working-directory}}/tests/tiup-playground/${{matrix.cases}}.sh

      - name: Collect component log
        working-directory: ${{env.working-directory}}
        # if: steps.test.outputs.exit_code != 0
        if: always()
        run: |
          find ${{env.working-directory}}/tests/tiup-playground/_tmp/data -type f | grep -E '*/ti.*/ti.*.log$' | xargs tar czvf ${{env.working-directory}}/playground.logs.tar.gz

      - name: Upload component log
        # if: steps.test.outputs.exit_code != 0
        if: always()
        uses: actions/upload-artifact@v1
        with:
          name: playground_logs
          path: ${{env.working-directory}}/playground.logs.tar.gz

      - name: Upload cover files
        uses: actions/upload-artifact@v1
        with:
          name: ${{matrix.cases}}-cover
          path: ${{env.working-directory}}/tests/tiup-playground/cover

  tiup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: true
      matrix:
        cases:
          - "test_tiup"
    env:
      working-directory: ${{ github.workspace   }}/go/src/github.com/${{ github.repository   }}
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha  }}
          path: go/src/github.com/${{ github.repository  }}

      - name: Build build_tiup_test
        working-directory: ${{env.working-directory}}
        run: |
          export GOPATH=${GITHUB_WORKSPACE}/go
          export PATH=$PATH:$GOPATH/bin
          make build_tiup_test

      - name: Run test suite
        id: test
        working-directory: ${{env.working-directory}}
        run: |
          export PATH=$PATH:${{env.working-directory}}/bin/
          bash ${{env.working-directory}}/tests/tiup/${{matrix.cases}}.sh

      - name: Upload cover files
        uses: actions/upload-artifact@v1
        with:
          name: ${{matrix.cases}}-cover
          path: ${{env.working-directory}}/tests/tiup/cover

      # - name: Setup tmate session
      #   if: always()
      #   uses: mxschmitt/action-tmate@v2
  coverage:
    needs: [cluster,playground,tiup]
    runs-on: ubuntu-latest
    env:
      working-directory: ${{ github.workspace   }}/go/src/github.com/${{ github.repository   }}
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha  }}
          path: go/src/github.com/${{ github.repository  }}

      - name: make unit-test
        working-directory: ${{env.working-directory}}
        run: |
          export GOPATH=${GITHUB_WORKSPACE}/go
          export PATH=$PATH:$GOPATH/bin
          make failpoint-enable
          make unit-test

      - uses: actions/download-artifact@v1
        with:
          name: test_cmd-cover
          path: ${{env.working-directory}}/cover

      # - uses: actions/download-artifact@v1
      #  with:
      #    name: test_dm_cmd-cover
      #    path: ${{env.working-directory}}/cover

      - uses: actions/download-artifact@v1
        with:
          name: test_upgrade-cover
          path: ${{env.working-directory}}/cover

      - uses: actions/download-artifact@v1
        with:
          name: test_playground-cover
          path: ${{env.working-directory}}/cover

      - uses: actions/download-artifact@v1
        with:
          name: test_tiup-cover
          path: ${{env.working-directory}}/cover

      - name: Make coverage
        working-directory: ${{env.working-directory}}
        run: |
          export GOPATH=${GITHUB_WORKSPACE}/go
          export PATH=$PATH:$GOPATH/bin
          make failpoint-enable
          make coverage

      - name: Upload all cover files
        uses: actions/upload-artifact@v1
        with:
          name: all-cover
          path: ${{env.working-directory}}/cover

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ${{env.working-directory}}/cover/all_cov.out
          flags: coverage
          name: codecov-umbrella
          fail_ci_if_error: true
