---
name: integrate-dm

on:
  schedule:
    # times are in UTC
    - cron: '19 21 * * *'
  pull_request:
    branches:
      - master
      - release-*
    paths-ignore:
      - '**.html'
      - '**.md'
      - 'CNAME'
      - 'LICENSE'
      - 'doc/**'
      - 'embed/templates/examples/**'
      - 'components/client/**'
      - 'components/ctl/**'
      - 'components/cluster/**'
      - 'components/doc/**'
      - 'components/errdoc/**'
      - 'components/playground/**'
      - 'server/**'
      - 'pkg/version/version.go'
      - '.github/workflows/integrate-cluster**'
      - '.github/workflows/integrate-tiup**'
      - '.github/workflows/integrate-playground**'

jobs:
  dm:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        cases:
          - '--do-cases test_cmd'
          - '--do-cases test_upgrade'
          - '--native-ssh --do-cases test_cmd'
          - '--native-ssh --do-cases test_upgrade'
    steps:
      - name: Set up Go 1.24
        uses: actions/setup-go@v4
        with:
          go-version: 1.24.x
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Build build_integration_test
        run: |
          export PATH=$PATH:$GOPATH/bin
          sudo apt-get update
          sudo apt-get install -y build-essential python-is-python3 python3-pip ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
                $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
                sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
          make build_integration_test
          make tiup

      - name: Build the docker-compose stack
        # with --dev the first run will fail for unknow reason, just retry it and will success now..
        run: |
          TIUP_CLUSTER_ROOT=$(pwd) ./docker/up.sh --daemon --compose ./docker-compose.dm.yml

      - name: Check running containers
        run: |
          docker ps
          df -h
          free -h

      - name: Run test suite
        id: test
        run: |
          # ensuere docker ssh is ready
          sleep 4
          # should not use -it
          # ref: https://stackoverflow.com/questions/43099116/error-the-input-device-is-not-a-tty
          docker exec tiup-cluster-control bash /tiup-cluster/tests/tiup-dm/run.sh ${{ matrix.cases }}

      - name: Collect component log
        if: ${{ failure() }}
        # if: ${{ failure() }}
        run: |
          docker exec tiup-cluster-control bash -c 'mkdir -p /tiup-cluster/logs; [[ -d ~/.tiup/logs ]] && find ~/.tiup/logs -type f -name "*.log" -exec cp {} /tiup-cluster/logs \; || true'

      - name: Upload component log
        if: ${{ failure() }}
        # if: always()
        uses: actions/upload-artifact@v4
        with:
          overwrite: true
          name: dm_logs
          path: ./logs

      - name: Output dm debug log
        if: ${{ failure() }}
        # if: always()
        run: |
          pwd
          docker ps
          df -h
          free -h
          find ./logs -type f -exec sh -c 'echo "{}" && cat {} && echo "\n"' \; || true

      - name: Upload coverage to Codecov
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -F dm -s ./tests/tiup-dm/cover -f '*.out'
